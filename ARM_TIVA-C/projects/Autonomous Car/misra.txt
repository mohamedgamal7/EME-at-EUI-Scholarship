Description	Resource	Path	Location	Type
#1383-D (MISRA-C:2004 8.1/R) Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call	main.c	/MegaProject	line 24	C/C++ Problem
#1387-D (MISRA-C:2004 8.7/R) Objects shall be defined at block scope if they are only accessed from within a single function (variable "dataPin0Pin")	LCD_config.h	/MegaProject/HAL/LCD	line 18	C/C++ Problem
#1387-D (MISRA-C:2004 8.7/R) Objects shall be defined at block scope if they are only accessed from within a single function (variable "dataPin0Port")	LCD_config.h	/MegaProject/HAL/LCD	line 19	C/C++ Problem
#1387-D (MISRA-C:2004 8.7/R) Objects shall be defined at block scope if they are only accessed from within a single function (variable "dataPin1Pin")	LCD_config.h	/MegaProject/HAL/LCD	line 21	C/C++ Problem
#1387-D (MISRA-C:2004 8.7/R) Objects shall be defined at block scope if they are only accessed from within a single function (variable "dataPin1Port")	LCD_config.h	/MegaProject/HAL/LCD	line 22	C/C++ Problem
#1387-D (MISRA-C:2004 8.7/R) Objects shall be defined at block scope if they are only accessed from within a single function (variable "dataPin2Pin")	LCD_config.h	/MegaProject/HAL/LCD	line 24	C/C++ Problem
#1387-D (MISRA-C:2004 8.7/R) Objects shall be defined at block scope if they are only accessed from within a single function (variable "dataPin2Port")	LCD_config.h	/MegaProject/HAL/LCD	line 25	C/C++ Problem
#1387-D (MISRA-C:2004 8.7/R) Objects shall be defined at block scope if they are only accessed from within a single function (variable "dataPin3Pin")	LCD_config.h	/MegaProject/HAL/LCD	line 27	C/C++ Problem
#1387-D (MISRA-C:2004 8.7/R) Objects shall be defined at block scope if they are only accessed from within a single function (variable "dataPin3Port")	LCD_config.h	/MegaProject/HAL/LCD	line 28	C/C++ Problem
#1387-D (MISRA-C:2004 8.7/R) Objects shall be defined at block scope if they are only accessed from within a single function (variable "enPin")	LCD_config.h	/MegaProject/HAL/LCD	line 37	C/C++ Problem
#1387-D (MISRA-C:2004 8.7/R) Objects shall be defined at block scope if they are only accessed from within a single function (variable "enPort")	LCD_config.h	/MegaProject/HAL/LCD	line 38	C/C++ Problem
#1387-D (MISRA-C:2004 8.7/R) Objects shall be defined at block scope if they are only accessed from within a single function (variable "rwPin")	LCD_config.h	/MegaProject/HAL/LCD	line 34	C/C++ Problem
#1387-D (MISRA-C:2004 8.7/R) Objects shall be defined at block scope if they are only accessed from within a single function (variable "rwPort")	LCD_config.h	/MegaProject/HAL/LCD	line 35	C/C++ Problem
#1392-D (MISRA-C:2004 9.3/R) In an enumerator list, the '=' construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised	types.h	/MegaProject/LIB	line 41	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/MegaProject/MCAL/ADC	line 25	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/MegaProject/MCAL/ADC	line 30	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/MegaProject/MCAL/ADC	line 32	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/MegaProject/MCAL/ADC	line 34	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/MegaProject/MCAL/ADC	line 36	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/MegaProject/MCAL/ADC	line 38	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/MegaProject/MCAL/ADC	line 40	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/MegaProject/MCAL/ADC	line 42	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/MegaProject/MCAL/ADC	line 44	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/MegaProject/MCAL/ADC	line 59	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/MegaProject/MCAL/ADC	line 65	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/MegaProject/MCAL/ADC	line 68	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/MegaProject/MCAL/ADC	line 71	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/MegaProject/MCAL/ADC	line 74	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/MegaProject/MCAL/ADC	line 84	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/MegaProject/MCAL/ADC	line 85	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/MegaProject/MCAL/ADC	line 87	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/MegaProject/MCAL/ADC	line 88	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/MegaProject/MCAL/ADC	line 90	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/MegaProject/MCAL/ADC	line 91	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/MegaProject/MCAL/ADC	line 93	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/MegaProject/MCAL/ADC	line 94	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	APP.c	/MegaProject/APP	line 16	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	APP.c	/MegaProject/APP	line 83	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	APP.c	/MegaProject/APP	line 89	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	APP.c	/MegaProject/APP	line 91	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	APP.c	/MegaProject/APP	line 95	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	APP.c	/MegaProject/APP	line 97	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	APP.c	/MegaProject/APP	line 104	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 13	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 14	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 28	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 29	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 30	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 35	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 36	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 37	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 42	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 43	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 44	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 49	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 50	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 51	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 56	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 57	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 58	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 63	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 64	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 65	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 70	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 71	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 72	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("str")	LCD_program.c	/MegaProject/HAL/LCD	line 142	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("i")	LCD_program.c	/MegaProject/HAL/LCD	line 141	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("i")	LCD_program.c	/MegaProject/HAL/LCD	line 112	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("i")	LCD_program.c	/MegaProject/HAL/LCD	line 87	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("i")	LCD_program.c	/MegaProject/HAL/LCD	line 69	C/C++ Problem
#1477-D (MISRA-C:2004 8.5/R) There shall be no definitions of objects or functions in a header file	LCD_config.h	/MegaProject/HAL/LCD	line 38	C/C++ Problem
#1477-D (MISRA-C:2004 8.5/R) There shall be no definitions of objects or functions in a header file	LCD_config.h	/MegaProject/HAL/LCD	line 37	C/C++ Problem
#1477-D (MISRA-C:2004 8.5/R) There shall be no definitions of objects or functions in a header file	LCD_config.h	/MegaProject/HAL/LCD	line 35	C/C++ Problem
#1477-D (MISRA-C:2004 8.5/R) There shall be no definitions of objects or functions in a header file	LCD_config.h	/MegaProject/HAL/LCD	line 34	C/C++ Problem
#1477-D (MISRA-C:2004 8.5/R) There shall be no definitions of objects or functions in a header file	LCD_config.h	/MegaProject/HAL/LCD	line 32	C/C++ Problem
#1477-D (MISRA-C:2004 8.5/R) There shall be no definitions of objects or functions in a header file	LCD_config.h	/MegaProject/HAL/LCD	line 31	C/C++ Problem
#1477-D (MISRA-C:2004 8.5/R) There shall be no definitions of objects or functions in a header file	LCD_config.h	/MegaProject/HAL/LCD	line 28	C/C++ Problem
#1477-D (MISRA-C:2004 8.5/R) There shall be no definitions of objects or functions in a header file	LCD_config.h	/MegaProject/HAL/LCD	line 27	C/C++ Problem
#1477-D (MISRA-C:2004 8.5/R) There shall be no definitions of objects or functions in a header file	LCD_config.h	/MegaProject/HAL/LCD	line 25	C/C++ Problem
#1477-D (MISRA-C:2004 8.5/R) There shall be no definitions of objects or functions in a header file	LCD_config.h	/MegaProject/HAL/LCD	line 24	C/C++ Problem
#1477-D (MISRA-C:2004 8.5/R) There shall be no definitions of objects or functions in a header file	LCD_config.h	/MegaProject/HAL/LCD	line 22	C/C++ Problem
#1477-D (MISRA-C:2004 8.5/R) There shall be no definitions of objects or functions in a header file	LCD_config.h	/MegaProject/HAL/LCD	line 21	C/C++ Problem
#1477-D (MISRA-C:2004 8.5/R) There shall be no definitions of objects or functions in a header file	LCD_config.h	/MegaProject/HAL/LCD	line 19	C/C++ Problem
#1477-D (MISRA-C:2004 8.5/R) There shall be no definitions of objects or functions in a header file	LCD_config.h	/MegaProject/HAL/LCD	line 18	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	LCD_program.c	/MegaProject/HAL/LCD	line 90	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	LCD_program.c	/MegaProject/HAL/LCD	line 88	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	LCD_program.c	/MegaProject/HAL/LCD	line 150	C/C++ Problem
#1465-D (MISRA-C:2004 14.1/R) There shall be no unreachable code	LCD_program.c	/MegaProject/HAL/LCD	line 133	C/C++ Problem
#1460-D (MISRA-C:2004 16.7/A) A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object ("str: const char *")	LCD_program.c	/MegaProject/HAL/LCD	line 92	C/C++ Problem
#1460-D (MISRA-C:2004 16.7/A) A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object ("c: const unsigned char [8]")	LCD_program.c	/MegaProject/HAL/LCD	line 119	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	LDR.c	/MegaProject/HAL/LDR	line 47	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	LCD_program.c	/MegaProject/HAL/LCD	line 110	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	APP.c	/MegaProject/APP	line 95	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	APP.c	/MegaProject/APP	line 91	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	APP.c	/MegaProject/APP	line 83	C/C++ Problem
#1412-D (MISRA-C:2004 13.4/R) The controlling expression of a for statement shall not contain any objects of floating type	APP.c	/MegaProject/APP	line 91	C/C++ Problem
#1404-D (MISRA-C:2004 12.4/R) The right-hand operand of a logical && or || operator shall not contain side effects	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 89	C/C++ Problem
#1404-D (MISRA-C:2004 12.4/R) The right-hand operand of a logical && or || operator shall not contain side effects	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 80	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 31	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 29	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 89	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 80	C/C++ Problem
#1470-D (MISRA-C:2004 14.9/R) An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 82	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 89	C/C++ Problem
#1470-D (MISRA-C:2004 14.9/R) An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 91	C/C++ Problem
#1468-D (MISRA-C:2004 14.7/R) A function shall have a single point of exit at the end of the function	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 82	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "P" is used as an operand of # or ##.	BIT_MATH.h	/MegaProject/LIB	line 15	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Delay.c	/MegaProject/LIB	line 13	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("i")	Delay.c	/MegaProject/LIB	line 17	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("j")	Delay.c	/MegaProject/LIB	line 17	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	Delay.c	/MegaProject/LIB	line 19	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 86	C/C++ Problem
#1424-D (MISRA-C:2004 18.4/R) Unions shall not be used	types.h	/MegaProject/LIB	line 49	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/MegaProject/MCAL/ADC	line 10	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/MegaProject/MCAL/ADC	line 15	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/MegaProject/MCAL/ADC	line 17	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	ADC.c	/MegaProject/MCAL/ADC	line 17	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 80	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 77	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 42	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	ADC.c	/MegaProject/MCAL/ADC	line 27	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	ADC.c	/MegaProject/MCAL/ADC	line 23	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if the expression is complex	TempSensor.c	/MegaProject/HAL/TEMPSENSOR	line 27	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if it is not a conversion to a wider floating type	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 95	C/C++ Problem
#1394-D (MISRA-C:2004 10.2/R) The value of an expression of floating type shall not be implicitly converted to a different type if it is not a conversion to a wider floating type	TempSensor.c	/MegaProject/HAL/TEMPSENSOR	line 27	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 91	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 82	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 44	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	ADC.c	/MegaProject/MCAL/ADC	line 49	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	ADC.c	/MegaProject/MCAL/ADC	line 29	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	ADC.c	/MegaProject/MCAL/ADC	line 57	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_program.c	/MegaProject/HAL/LCD	line 150	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	ADC.c	/MegaProject/MCAL/ADC	line 61	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_program.c	/MegaProject/HAL/LCD	line 129	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_program.c	/MegaProject/HAL/LCD	line 128	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_program.c	/MegaProject/HAL/LCD	line 127	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_program.c	/MegaProject/HAL/LCD	line 126	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_program.c	/MegaProject/HAL/LCD	line 118	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_program.c	/MegaProject/HAL/LCD	line 105	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_program.c	/MegaProject/HAL/LCD	line 79	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_program.c	/MegaProject/HAL/LCD	line 72	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	ADC.c	/MegaProject/MCAL/ADC	line 59	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	ADC.c	/MegaProject/MCAL/ADC	line 64	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_program.c	/MegaProject/HAL/LCD	line 58	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_program.c	/MegaProject/HAL/LCD	line 51	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_program.c	/MegaProject/HAL/LCD	line 38	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_program.c	/MegaProject/HAL/LCD	line 37	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_program.c	/MegaProject/HAL/LCD	line 36	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_program.c	/MegaProject/HAL/LCD	line 35	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD_program.c	/MegaProject/HAL/LCD	line 29	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	APP.c	/MegaProject/APP	line 112	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	ADC.c	/MegaProject/MCAL/ADC	line 83	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	APP.c	/MegaProject/APP	line 99	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	APP.c	/MegaProject/APP	line 82	C/C++ Problem
#1466-D (MISRA-C:2004 14.5/R) The continue statement shall not be used	DIO.c	/MegaProject/MCAL/DIO	line 15	C/C++ Problem
#1470-D (MISRA-C:2004 14.9/R) An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement	DIO.c	/MegaProject/MCAL/DIO	line 15	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 28	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	APP.c	/MegaProject/APP	line 80	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 29	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	APP.c	/MegaProject/APP	line 52	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 30	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	APP.c	/MegaProject/APP	line 51	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 31	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	APP.c	/MegaProject/APP	line 50	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 32	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	APP.c	/MegaProject/APP	line 48	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 35	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	APP.c	/MegaProject/APP	line 46	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 36	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	APP.c	/MegaProject/APP	line 37	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 37	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	APP.c	/MegaProject/APP	line 32	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 38	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	APP.c	/MegaProject/APP	line 27	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 39	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	APP.c	/MegaProject/APP	line 22	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 42	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	LDR.c	/MegaProject/HAL/LDR	line 55	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 43	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	LDR.c	/MegaProject/HAL/LDR	line 50	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 44	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	LDR.c	/MegaProject/HAL/LDR	line 44	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 45	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	LDR.c	/MegaProject/HAL/LDR	line 37	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 46	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	LCD_program.c	/MegaProject/HAL/LCD	line 149	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 49	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	LCD_program.c	/MegaProject/HAL/LCD	line 145	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 50	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	LCD_program.c	/MegaProject/HAL/LCD	line 110	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 51	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	LCD_program.c	/MegaProject/HAL/LCD	line 105	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 52	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 52	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 53	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 53	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 56	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 46	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 57	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 45	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 58	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 39	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 59	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 59	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 60	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 60	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 63	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 38	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 64	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 32	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 65	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 31	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 66	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 66	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 67	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 67	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 70	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	ADC.c	/MegaProject/MCAL/ADC	line 75	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 71	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	ADC.c	/MegaProject/MCAL/ADC	line 72	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 72	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	ADC.c	/MegaProject/MCAL/ADC	line 69	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 73	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	ADC.c	/MegaProject/MCAL/ADC	line 66	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 74	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 97	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 75	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 90	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 76	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 88	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 77	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 81	C/C++ Problem
#1416-D (MISRA-C:2004 15.2/R) An unconditional break statement shall terminate every non-empty switch clause	DIO.c	/MegaProject/MCAL/DIO	line 69	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 83	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 83	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 86	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 86	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 89	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 89	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 92	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 92	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 95	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 95	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 98	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 98	C/C++ Problem
#1416-D (MISRA-C:2004 15.2/R) An unconditional break statement shall terminate every non-empty switch clause	DIO.c	/MegaProject/MCAL/DIO	line 97	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 104	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 104	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 107	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 107	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 110	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 110	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 113	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 113	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 116	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 116	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 119	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 119	C/C++ Problem
#1416-D (MISRA-C:2004 15.2/R) An unconditional break statement shall terminate every non-empty switch clause	DIO.c	/MegaProject/MCAL/DIO	line 118	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 124	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 124	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 127	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 127	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 130	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 130	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 133	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 133	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 136	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 136	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 139	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 139	C/C++ Problem
#1416-D (MISRA-C:2004 15.2/R) An unconditional break statement shall terminate every non-empty switch clause	DIO.c	/MegaProject/MCAL/DIO	line 138	C/C++ Problem
#1460-D (MISRA-C:2004 16.7/A) A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object ("StructPtr: const PinConfig *")	DIO.c	/MegaProject/MCAL/DIO	line 141	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	DIO.c	/MegaProject/MCAL/DIO	line 29	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	DIO.c	/MegaProject/MCAL/DIO	line 36	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	DIO.c	/MegaProject/MCAL/DIO	line 43	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	DIO.c	/MegaProject/MCAL/DIO	line 50	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	DIO.c	/MegaProject/MCAL/DIO	line 57	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	DIO.c	/MegaProject/MCAL/DIO	line 64	C/C++ Problem
#1469-D (MISRA-C:2004 14.8/R) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement	DIO.c	/MegaProject/MCAL/DIO	line 71	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	DIO.c	/MegaProject/MCAL/DIO	line 81	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	DIO.c	/MegaProject/MCAL/DIO	line 102	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	DIO.c	/MegaProject/MCAL/DIO	line 101	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	DIO.c	/MegaProject/MCAL/DIO	line 122	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 152	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 74	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 153	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 153	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 154	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 154	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 155	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 155	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 156	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 156	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	DIO.c	/MegaProject/MCAL/DIO	line 157	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 157	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 73	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 160	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 71	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 161	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 161	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 162	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 162	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 163	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 163	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 164	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 164	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	DIO.c	/MegaProject/MCAL/DIO	line 165	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 165	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 42	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 168	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 31	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 169	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 169	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 170	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 170	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 171	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 171	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 172	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 172	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	DIO.c	/MegaProject/MCAL/DIO	line 173	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 173	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ULTRASONIC_program.c	/MegaProject/HAL/ULTRASONIC	line 29	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 176	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	TempSensor.c	/MegaProject/HAL/TEMPSENSOR	line 27	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 177	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 177	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 178	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 178	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 179	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 179	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 180	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 180	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	DIO.c	/MegaProject/MCAL/DIO	line 181	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 181	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	TempSensor.c	/MegaProject/HAL/TEMPSENSOR	line 25	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 184	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	TempSensor.c	/MegaProject/HAL/TEMPSENSOR	line 23	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 185	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 185	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 186	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 186	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 187	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 187	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 188	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 188	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	DIO.c	/MegaProject/MCAL/DIO	line 189	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 189	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LDR.c	/MegaProject/HAL/LDR	line 47	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 192	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LDR.c	/MegaProject/HAL/LDR	line 40	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 193	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 193	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 194	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 194	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 195	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 195	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 196	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 196	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	DIO.c	/MegaProject/MCAL/DIO	line 197	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 197	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LDR.c	/MegaProject/HAL/LDR	line 33	C/C++ Problem
#1416-D (MISRA-C:2004 15.2/R) An unconditional break statement shall terminate every non-empty switch clause	DIO.c	/MegaProject/MCAL/DIO	line 191	C/C++ Problem
#1460-D (MISRA-C:2004 16.7/A) A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object ("StructPtr: const PinConfig *")	DIO.c	/MegaProject/MCAL/DIO	line 200	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	DIO.c	/MegaProject/MCAL/DIO	line 150	C/C++ Problem
#1468-D (MISRA-C:2004 14.7/R) A function shall have a single point of exit at the end of the function	DIO.c	/MegaProject/MCAL/DIO	line 147	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 207	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 207	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 208	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LDR.c	/MegaProject/HAL/LDR	line 30	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 208	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	DIO.c	/MegaProject/MCAL/DIO	line 208	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	DIO.c	/MegaProject/MCAL/DIO	line 208	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 211	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 211	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 212	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LDR.c	/MegaProject/HAL/LDR	line 29	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 212	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	DIO.c	/MegaProject/MCAL/DIO	line 212	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	DIO.c	/MegaProject/MCAL/DIO	line 212	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 215	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 215	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 216	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LDR.c	/MegaProject/HAL/LDR	line 24	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 216	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	DIO.c	/MegaProject/MCAL/DIO	line 216	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	DIO.c	/MegaProject/MCAL/DIO	line 216	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 219	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 219	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 220	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LDR.c	/MegaProject/HAL/LDR	line 23	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 220	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	DIO.c	/MegaProject/MCAL/DIO	line 220	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	DIO.c	/MegaProject/MCAL/DIO	line 220	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 223	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 223	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 224	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_program.c	/MegaProject/HAL/LCD	line 149	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 224	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	DIO.c	/MegaProject/MCAL/DIO	line 224	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	DIO.c	/MegaProject/MCAL/DIO	line 224	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 227	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 227	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 228	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_program.c	/MegaProject/HAL/LCD	line 146	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 228	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	DIO.c	/MegaProject/MCAL/DIO	line 228	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	DIO.c	/MegaProject/MCAL/DIO	line 228	C/C++ Problem
#1416-D (MISRA-C:2004 15.2/R) An unconditional break statement shall terminate every non-empty switch clause	DIO.c	/MegaProject/MCAL/DIO	line 226	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	DIO.c	/MegaProject/MCAL/DIO	line 204	C/C++ Problem
#1496-D (MISRA-C:2004 5.6/A) No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure member and union member names ("Pins")	DIO.c	/MegaProject/MCAL/DIO	line 232	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 236	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 239	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 242	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 245	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 248	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 251	C/C++ Problem
#1416-D (MISRA-C:2004 15.2/R) An unconditional break statement shall terminate every non-empty switch clause	DIO.c	/MegaProject/MCAL/DIO	line 250	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	DIO.c	/MegaProject/MCAL/DIO	line 233	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_program.c	/MegaProject/HAL/LCD	line 145	C/C++ Problem
#1407-D (MISRA-C:2004 12.8/R) The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand	DIO.c	/MegaProject/MCAL/DIO	line 258	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 258	C/C++ Problem
#1395-D (MISRA-C:2004 10.3/R) The value of a complex expression of integer type shall only be cast to a type of the same signedness that is no wider than the underlying type of the expression	DIO.c	/MegaProject/MCAL/DIO	line 258	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 258	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	DIO.c	/MegaProject/MCAL/DIO	line 258	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	DIO.c	/MegaProject/MCAL/DIO	line 258	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	DIO.c	/MegaProject/MCAL/DIO	line 258	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_program.c	/MegaProject/HAL/LCD	line 143	C/C++ Problem
#1407-D (MISRA-C:2004 12.8/R) The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand	DIO.c	/MegaProject/MCAL/DIO	line 264	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	DIO.c	/MegaProject/MCAL/DIO	line 264	C/C++ Problem
#1395-D (MISRA-C:2004 10.3/R) The value of a complex expression of integer type shall only be cast to a type of the same signedness that is no wider than the underlying type of the expression	DIO.c	/MegaProject/MCAL/DIO	line 264	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 264	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	DIO.c	/MegaProject/MCAL/DIO	line 264	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	DIO.c	/MegaProject/MCAL/DIO	line 264	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	DIO.c	/MegaProject/MCAL/DIO	line 264	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	DIO.c	/MegaProject/MCAL/DIO	line 264	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_program.c	/MegaProject/HAL/LCD	line 141	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 274	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 277	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 280	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 283	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 286	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	DIO.c	/MegaProject/MCAL/DIO	line 289	C/C++ Problem
#1416-D (MISRA-C:2004 15.2/R) An unconditional break statement shall terminate every non-empty switch clause	DIO.c	/MegaProject/MCAL/DIO	line 288	C/C++ Problem
#1471-D (MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	DIO.c	/MegaProject/MCAL/DIO	line 272	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "CpyPort_ID" is used as an operand of # or ##.	DIO.h	/MegaProject/MCAL/DIO	line 17	C/C++ Problem
#1496-D (MISRA-C:2004 5.6/A) No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure member and union member names ("Pins")	DIO.h	/MegaProject/MCAL/DIO	line 67	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_program.c	/MegaProject/HAL/LCD	line 110	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD_program.c	/MegaProject/HAL/LCD	line 105	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 17	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 18	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 19	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 20	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 24	C/C++ Problem
#1423-D (MISRA-C:2004 17.6/R) The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist	DIO_Config.c	/MegaProject/MCAL/DIO	line 26	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 30	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 31	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 32	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 33	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 37	C/C++ Problem
#1423-D (MISRA-C:2004 17.6/R) The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist	DIO_Config.c	/MegaProject/MCAL/DIO	line 39	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 43	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 44	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 45	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 46	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 49	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 50	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 54	C/C++ Problem
#1423-D (MISRA-C:2004 17.6/R) The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist	DIO_Config.c	/MegaProject/MCAL/DIO	line 56	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 60	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 61	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 62	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 63	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 68	C/C++ Problem
#1423-D (MISRA-C:2004 17.6/R) The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist	DIO_Config.c	/MegaProject/MCAL/DIO	line 70	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 74	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 75	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 76	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 77	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 82	C/C++ Problem
#1423-D (MISRA-C:2004 17.6/R) The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist	DIO_Config.c	/MegaProject/MCAL/DIO	line 84	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 88	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 89	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 90	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 94	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 95	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 96	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 97	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 98	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 99	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 100	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 103	C/C++ Problem
#1423-D (MISRA-C:2004 17.6/R) The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist	DIO_Config.c	/MegaProject/MCAL/DIO	line 105	C/C++ Problem
#179-D variable "ReadWritePORT_A" was declared but never referenced	DIO_Config.c	/MegaProject/MCAL/DIO	line 23	C/C++ Problem
#179-D variable "ReadWritePORT_B" was declared but never referenced	DIO_Config.c	/MegaProject/MCAL/DIO	line 36	C/C++ Problem
#179-D variable "ReadWritePORT_C" was declared but never referenced	DIO_Config.c	/MegaProject/MCAL/DIO	line 53	C/C++ Problem
#179-D variable "ReadWritePORT_D" was declared but never referenced	DIO_Config.c	/MegaProject/MCAL/DIO	line 67	C/C++ Problem
#179-D variable "ReadWritePORT_E" was declared but never referenced	DIO_Config.c	/MegaProject/MCAL/DIO	line 81	C/C++ Problem
#179-D variable "ReadWritePORT_F" was declared but never referenced	DIO_Config.c	/MegaProject/MCAL/DIO	line 102	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/MegaProject/MCAL/GPTM	line 10	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	GPTM.c	/MegaProject/MCAL/GPTM	line 11	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/MegaProject/MCAL/GPTM	line 11	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/MegaProject/MCAL/GPTM	line 17	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/MegaProject/MCAL/GPTM	line 19	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPTM.c	/MegaProject/MCAL/GPTM	line 36	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 40	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 43	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPTM.c	/MegaProject/MCAL/GPTM	line 42	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 51	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPTM.c	/MegaProject/MCAL/GPTM	line 52	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPTM.c	/MegaProject/MCAL/GPTM	line 52	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 55	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPTM.c	/MegaProject/MCAL/GPTM	line 56	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPTM.c	/MegaProject/MCAL/GPTM	line 56	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 58	C/C++ Problem
#1407-D (MISRA-C:2004 12.8/R) The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand	GPTM.c	/MegaProject/MCAL/GPTM	line 59	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPTM.c	/MegaProject/MCAL/GPTM	line 59	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPTM.c	/MegaProject/MCAL/GPTM	line 59	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPTM.c	/MegaProject/MCAL/GPTM	line 57	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 66	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPTM.c	/MegaProject/MCAL/GPTM	line 67	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPTM.c	/MegaProject/MCAL/GPTM	line 67	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 70	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPTM.c	/MegaProject/MCAL/GPTM	line 71	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPTM.c	/MegaProject/MCAL/GPTM	line 71	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 73	C/C++ Problem
#1407-D (MISRA-C:2004 12.8/R) The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand	GPTM.c	/MegaProject/MCAL/GPTM	line 74	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPTM.c	/MegaProject/MCAL/GPTM	line 74	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPTM.c	/MegaProject/MCAL/GPTM	line 74	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPTM.c	/MegaProject/MCAL/GPTM	line 72	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 81	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPTM.c	/MegaProject/MCAL/GPTM	line 82	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPTM.c	/MegaProject/MCAL/GPTM	line 82	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 85	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPTM.c	/MegaProject/MCAL/GPTM	line 86	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPTM.c	/MegaProject/MCAL/GPTM	line 86	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 88	C/C++ Problem
#1407-D (MISRA-C:2004 12.8/R) The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand	GPTM.c	/MegaProject/MCAL/GPTM	line 89	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPTM.c	/MegaProject/MCAL/GPTM	line 89	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPTM.c	/MegaProject/MCAL/GPTM	line 89	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPTM.c	/MegaProject/MCAL/GPTM	line 87	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 96	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPTM.c	/MegaProject/MCAL/GPTM	line 97	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPTM.c	/MegaProject/MCAL/GPTM	line 97	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 100	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPTM.c	/MegaProject/MCAL/GPTM	line 101	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPTM.c	/MegaProject/MCAL/GPTM	line 101	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 103	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPTM.c	/MegaProject/MCAL/GPTM	line 104	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPTM.c	/MegaProject/MCAL/GPTM	line 104	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPTM.c	/MegaProject/MCAL/GPTM	line 102	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 111	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 114	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 116	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPTM.c	/MegaProject/MCAL/GPTM	line 115	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 123	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 126	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 128	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPTM.c	/MegaProject/MCAL/GPTM	line 127	C/C++ Problem
#1420-D (MISRA-C:2004 16.5/R) Functions with no parameters shall be declared and defined with the parameter list void	GPTM.c	/MegaProject/MCAL/GPTM	line 148	C/C++ Problem
#1397-D (MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPTM.c	/MegaProject/MCAL/GPTM	line 149	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 183	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPTM.c	/MegaProject/MCAL/GPTM	line 182	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	GPTM.c	/MegaProject/MCAL/GPTM	line 202	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPTM.c	/MegaProject/MCAL/GPTM	line 198	C/C++ Problem
#1468-D (MISRA-C:2004 14.7/R) A function shall have a single point of exit at the end of the function	GPTM.c	/MegaProject/MCAL/GPTM	line 194	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 207	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	GPTM.c	/MegaProject/MCAL/GPTM	line 209	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 212	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	GPTM.c	/MegaProject/MCAL/GPTM	line 212	C/C++ Problem
#1468-D (MISRA-C:2004 14.7/R) A function shall have a single point of exit at the end of the function	GPTM.c	/MegaProject/MCAL/GPTM	line 209	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPTM.c	/MegaProject/MCAL/GPTM	line 223	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 234	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	GPTM.c	/MegaProject/MCAL/GPTM	line 235	C/C++ Problem
#1468-D (MISRA-C:2004 14.7/R) A function shall have a single point of exit at the end of the function	GPTM.c	/MegaProject/MCAL/GPTM	line 232	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	GPTM.c	/MegaProject/MCAL/GPTM	line 248	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	GPTM.c	/MegaProject/MCAL/GPTM	line 244	C/C++ Problem
#1468-D (MISRA-C:2004 14.7/R) A function shall have a single point of exit at the end of the function	GPTM.c	/MegaProject/MCAL/GPTM	line 240	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	GPTM.c	/MegaProject/MCAL/GPTM	line 253	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("l_retVal")	GPTM.c	/MegaProject/MCAL/GPTM	line 255	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 255	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 256	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 257	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	GPTM.c	/MegaProject/MCAL/GPTM	line 257	C/C++ Problem
#1468-D (MISRA-C:2004 14.7/R) A function shall have a single point of exit at the end of the function	GPTM.c	/MegaProject/MCAL/GPTM	line 253	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 274	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	GPTM.c	/MegaProject/MCAL/GPTM	line 275	C/C++ Problem
#1468-D (MISRA-C:2004 14.7/R) A function shall have a single point of exit at the end of the function	GPTM.c	/MegaProject/MCAL/GPTM	line 280	C/C++ Problem
#1468-D (MISRA-C:2004 14.7/R) A function shall have a single point of exit at the end of the function	GPTM.c	/MegaProject/MCAL/GPTM	line 293	C/C++ Problem
#1468-D (MISRA-C:2004 14.7/R) A function shall have a single point of exit at the end of the function	GPTM.c	/MegaProject/MCAL/GPTM	line 335	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("l_retVal")	GPTM.c	/MegaProject/MCAL/GPTM	line 347	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 347	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 348	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 349	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	GPTM.c	/MegaProject/MCAL/GPTM	line 349	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 355	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	GPTM.c	/MegaProject/MCAL/GPTM	line 355	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 358	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	GPTM.c	/MegaProject/MCAL/GPTM	line 358	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/MegaProject/MCAL/GPTM	line 360	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression	GPTM.c	/MegaProject/MCAL/GPTM	line 360	C/C++ Problem
#1468-D (MISRA-C:2004 14.7/R) A function shall have a single point of exit at the end of the function	GPTM.c	/MegaProject/MCAL/GPTM	line 355	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO_Config.c	/MegaProject/MCAL/DIO	line 10	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 270	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 264	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 258	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 228	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 224	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 220	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 216	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 212	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 208	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 197	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 192	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 189	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 184	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 77	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 76	C/C++ Problem
#1420-D (MISRA-C:2004 16.5/R) Functions with no parameters shall be declared and defined with the parameter list void	GPTM.h	/MegaProject/MCAL/GPTM	line 144	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM_program.c	/MegaProject/MCAL/PWM	line 43	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM_program.c	/MegaProject/MCAL/PWM	line 15	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM_program.c	/MegaProject/MCAL/PWM	line 15	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM_program.c	/MegaProject/MCAL/PWM	line 17	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM_program.c	/MegaProject/MCAL/PWM	line 17	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM_program.c	/MegaProject/MCAL/PWM	line 19	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM_program.c	/MegaProject/MCAL/PWM	line 19	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM_program.c	/MegaProject/MCAL/PWM	line 22	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM_program.c	/MegaProject/MCAL/PWM	line 22	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM_program.c	/MegaProject/MCAL/PWM	line 25	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM_program.c	/MegaProject/MCAL/PWM	line 27	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM_program.c	/MegaProject/MCAL/PWM	line 27	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM_program.c	/MegaProject/MCAL/PWM	line 29	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM_program.c	/MegaProject/MCAL/PWM	line 29	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM_program.c	/MegaProject/MCAL/PWM	line 31	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM_program.c	/MegaProject/MCAL/PWM	line 31	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM_program.c	/MegaProject/MCAL/PWM	line 38	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM_program.c	/MegaProject/MCAL/PWM	line 38	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	PWM_program.c	/MegaProject/MCAL/PWM	line 38	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	PWM_program.c	/MegaProject/MCAL/PWM	line 38	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM_program.c	/MegaProject/MCAL/PWM	line 39	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM_program.c	/MegaProject/MCAL/PWM	line 39	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	PWM_program.c	/MegaProject/MCAL/PWM	line 39	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	PWM_program.c	/MegaProject/MCAL/PWM	line 39	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM_program.c	/MegaProject/MCAL/PWM	line 41	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM_program.c	/MegaProject/MCAL/PWM	line 41	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM_program.c	/MegaProject/MCAL/PWM	line 43	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Systick.c	/MegaProject/MCAL/SYSTICK	line 24	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Systick.c	/MegaProject/MCAL/SYSTICK	line 24	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	Systick.c	/MegaProject/MCAL/SYSTICK	line 25	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Systick.c	/MegaProject/MCAL/SYSTICK	line 25	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Systick.c	/MegaProject/MCAL/SYSTICK	line 25	C/C++ Problem
#1420-D (MISRA-C:2004 16.5/R) Functions with no parameters shall be declared and defined with the parameter list void	Systick.c	/MegaProject/MCAL/SYSTICK	line 39	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 75	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	Systick.c	/MegaProject/MCAL/SYSTICK	line 54	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Systick.c	/MegaProject/MCAL/SYSTICK	line 54	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	Systick.c	/MegaProject/MCAL/SYSTICK	line 71	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Systick.c	/MegaProject/MCAL/SYSTICK	line 71	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Systick.c	/MegaProject/MCAL/SYSTICK	line 71	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	Systick.c	/MegaProject/MCAL/SYSTICK	line 24	C/C++ Problem
#1420-D (MISRA-C:2004 16.5/R) Functions with no parameters shall be declared and defined with the parameter list void	Systick.h	/MegaProject/MCAL/SYSTICK	line 32	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Scheduler.c	/MegaProject/SERVICE	line 10	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Scheduler.c	/MegaProject/SERVICE	line 11	C/C++ Problem
#1420-D (MISRA-C:2004 16.5/R) Functions with no parameters shall be declared and defined with the parameter list void	Scheduler.c	/MegaProject/SERVICE	line 25	C/C++ Problem
#1496-D (MISRA-C:2004 5.6/A) No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure member and union member names ("period")	Scheduler.c	/MegaProject/SERVICE	line 25	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Scheduler.c	/MegaProject/SERVICE	line 26	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 74	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Scheduler.c	/MegaProject/SERVICE	line 40	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Scheduler.c	/MegaProject/SERVICE	line 42	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Scheduler.c	/MegaProject/SERVICE	line 43	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "ScheduleFunc")	Scheduler.c	/MegaProject/SERVICE	line 55	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Scheduler.c	/MegaProject/SERVICE	line 62	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Scheduler.c	/MegaProject/SERVICE	line 64	C/C++ Problem
#1404-D (MISRA-C:2004 12.4/R) The right-hand operand of a logical && or || operator shall not contain side effects	Scheduler.c	/MegaProject/SERVICE	line 64	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	Scheduler.c	/MegaProject/SERVICE	line 64	C/C++ Problem
#1501-D (MISRA-C:2004 14.10/R) All if ... else if constructs shall be terminated with an else clause	Scheduler.c	/MegaProject/SERVICE	line 64	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("i")	Scheduler.c	/MegaProject/SERVICE	line 87	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Scheduler.c	/MegaProject/SERVICE	line 87	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Scheduler.c	/MegaProject/SERVICE	line 88	C/C++ Problem
#1496-D (MISRA-C:2004 5.6/A) No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure member and union member names ("period")	Scheduler.h	/MegaProject/SERVICE	line 32	C/C++ Problem
#1420-D (MISRA-C:2004 16.5/R) Functions with no parameters shall be declared and defined with the parameter list void	Scheduler.h	/MegaProject/SERVICE	line 32	C/C++ Problem
#1420-D (MISRA-C:2004 16.5/R) Functions with no parameters shall be declared and defined with the parameter list void	Scheduler_Types.h	/MegaProject/SERVICE	line 15	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/MegaProject	line 36	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "lcd_display")	main.c	/MegaProject	line 37	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/MegaProject	line 37	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "avoid_obstacles")	main.c	/MegaProject	line 38	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/MegaProject	line 38	C/C++ Problem
#1421-D (MISRA-C:2004 16.8/R) All exit paths from a function with non-void return type shall have an explicit return statement with an expression (function "main")	main.c	/MegaProject	line 41	C/C++ Problem
#1420-D (MISRA-C:2004 16.5/R) Functions with no parameters shall be declared and defined with the parameter list void	main.c	/MegaProject	line 24	C/C++ Problem
#1393-D (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	DIO.c	/MegaProject/MCAL/DIO	line 73	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "ldr_swing_car")	main.c	/MegaProject	line 36	C/C++ Problem
#1400-D (MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	tm4c123gh6pm_startup_ccs.c	/MegaProject	line 96	C/C++ Problem


